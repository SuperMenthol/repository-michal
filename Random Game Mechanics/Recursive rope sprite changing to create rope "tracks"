//script checks for existing rope fields next to the one that has been marked by player (clicked)
//it assigns the sprite from collection based on how many neighbors are next to it, and recursively changes the sprite of those neighbors
//video: https://www.youtube.com/watch?v=3r7u0og2q14

public class ResourceTilesAssign : MonoBehaviour
{
    List<Vector3Int> ropeTilePositions;
    List<RopeOnMapScript> placedRopeTiles;
    List<RopeOnMapScript> ropeFieldsChecked;

    void PlaceRopeTile(Vector3Int position)
    {
        if (!ropeTilePositions.Contains(position))
        {
            var nRopeTile = Instantiate(rPrefab, position, Quaternion.identity);
            nRopeTile.name = position.ToString();

            nRopeTile.layer = 11;
            var nComp = nRopeTile.GetComponent<RopeOnMapScript>();
            nComp.pos = position;

            ropeTilePositions.Add(nComp.pos);
        }
    }

    public void CheckClosestRopeNeighbours(RopeOnMapScript ropeScript) 
    {
        placedRopeTiles.Add(ropeScript);

        //Debug.Log($"Checking neighbors for {ropeScript}");
        var startingPosition = ropeScript.pos;

        RopeOnMapScript[] tmpRopeNeighbors = new RopeOnMapScript[4];
        bool[] neighborArray = new bool[] { false, false, false, false };

        //checking neighbors on x axis first
        for (int i = 0; i < 2; i++)
        {
            int xOffset = i == 0 ? -1 : 1; //left-right
            var targetVector = new Vector3Int(startingPosition.x + xOffset, startingPosition.y, startingPosition.z);

            if (placedRopeTiles.Find(d => d.name == targetVector.ToString()))
            {
                var newItem = placedRopeTiles.Find(d => d.name == targetVector.ToString());
                tmpRopeNeighbors[i] = ropeFieldsChecked.Contains(newItem) ? null : newItem;
                ropeFieldsChecked.Add(newItem);
                neighborArray[i] = true;
            }
            else
            {
                tmpRopeNeighbors[i] = null;
                //Debug.Log($"X {i} not found in placedRopeTiles");
            }
        }

        //then y axis
        for (int i = 2; i < 4; i++)
        {
            int yOffset = i == 2 ? 1 : -1; //top-down
            var targetVector = new Vector3Int(startingPosition.x, startingPosition.y + yOffset, startingPosition.z);

            if (placedRopeTiles.Find(d => d.name == targetVector.ToString()))
            {
                var newItem = placedRopeTiles.Find(d => d.name == targetVector.ToString());
                tmpRopeNeighbors[i] = ropeFieldsChecked.Contains(newItem) ? null : newItem;
                ropeFieldsChecked.Add(newItem);
                neighborArray[i] = true;
            }
            else
            {
                tmpRopeNeighbors[i] = null;
                //Debug.Log($"Y {i} not found in placedRopeTiles");
            }
        }

        int spriteToAssign = AssignedSpriteNumber(neighborArray);
        ropeScript.ChangeSprite(ips.GetRopeSprite(spriteToAssign));

        for (int i = 0; i < 4; i++)
        {
            var item = tmpRopeNeighbors[i];

            //if (item != null && !ropeFieldsChecked.Contains(item))  //to not get into an infinite loop
            if (item != null)  //to not get into an infinite loop
            {
                CheckClosestRopeNeighbours(item);
            }

            tmpRopeNeighbors[i] = null;
        }
    }

    public void ClearRopeFieldsChecked() { ropeFieldsChecked.Clear(); }

    int AssignedSpriteNumber(bool[] boolArray)
    {

        //sprawdzam false, bo jest szybciej - w reszcie może być true/false
        if (boolArray.Where(d=>d == false).Count() == 4)
        {
            return 0;
        }
        else if (!boolArray[2] && !boolArray[3])
        {
            return 0;
        }
        else if (boolArray.Where(d => d == true).Count() == 3) //three-way rope
        {
            var falseIndex = boolArray.ToList().IndexOf(false);
            return falseIndex == 0 ? 7 : falseIndex == 1 ? 8 : falseIndex == 2 ? 6 : 9;
        }
        else if (boolArray.Where(d => d == true).Count() == 4) //four-way rope
        {
            return 10;
        }
        //two-way - corners or upwards
        else if (!boolArray[0] && !boolArray[1]) { return 1; }
        else if (!boolArray[0] && !boolArray[3]) { return 2; }
        else if (!boolArray[1] && !boolArray[2]) { return 3; }
        else if (!boolArray[1] && !boolArray[3]) { return 5; }
        else { return 4; }
    }
}
